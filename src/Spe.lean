import algebraic_geometry.sheafed_space
import algebraic_geometry.stalks
import topology.bases
import algebra.category.CommRing.colimits
import algebra.category.CommRing.filtered_colimits

open algebraic_geometry category_theory
  algebraic_geometry.PresheafedSpace topological_space opposite
  category_theory.limits Top.presheaf

variables (X : PresheafedSpace CommRing)

def Spe := Œ£ x, X.stalk x

variables {X}
def pr : Spe X ‚Üí X := Œª x, x.1

structure is_basic_open_prop (u : opens X) (s : X.presheaf.obj (op u)) (x : Spe X) : Prop :=
(pr_in : x.1 ‚àà u)
(is_stalk : x.2 = germ X.2 ‚ü®x.1, pr_in‚ü© s)

def basic_open (u : opens X) (s : X.presheaf.obj (op u)) : set (Spe X) := set_of (is_basic_open_prop u s)
-- #check is_basic_open
def Spe_basis : set (set (Spe X)) := { V : set (Spe X) | ‚àÉ (u : opens X) (s : X.presheaf.obj (op u)), V = basic_open u s }

instance Spe_topology : topological_space (Spe X) := generate_from Spe_basis 

lemma Spe_basis_is_topology_basis : is_topological_basis (@Spe_basis X) :=
begin
  apply is_topological_basis_of_open_of_nhds,
  { intros V hV, apply generate_open.basic, exact hV },
  { rintros ‚ü®x, t‚ü© V xt_mem Vo,
    induction Vo with W Wb W1 W2 W1o W2o h1 h2 ùíÆ hùíÆ ih,
    
    { use W, refine ‚ü®Wb, xt_mem, Œª _, id‚ü©, },
    { obtain ‚ü®u, x_mem, s, hs‚ü© := germ_exist X.2 x t,
      use basic_open u s,
      refine ‚ü®‚ü®u, s, rfl‚ü©, ‚ü®x_mem, hs.symm‚ü©, Œª _ _, set.mem_univ _‚ü©, },
      
    { specialize h1 (set.inter_subset_left _ _ xt_mem),
      specialize h2 (set.inter_subset_right _ _ xt_mem),
      obtain ‚ü®V1, V1b, xt_mem1, h1‚ü© := h1,
      obtain ‚ü®V2, V2b, xt_mem2, h2‚ü© := h2,
      obtain ‚ü®u1, s1, hu1‚ü© := V1b,
      obtain ‚ü®u2, s2, hu2‚ü© := V2b,
      rw hu1 at xt_mem1,
      rw hu2 at xt_mem2,
      rcases xt_mem1 with ‚ü®x_mem1, ht1‚ü©,
      rcases xt_mem2 with ‚ü®x_mem2, ht2‚ü©,
      have stalk_eq : X.presheaf.germ ‚ü®x, x_mem1‚ü© s1= X.presheaf.germ ‚ü®x, x_mem2‚ü© s2,
      rw [‚Üêht1, ht2],
      obtain ‚ü®w, x_memw, subset1, subset2, res_eq‚ü© := germ_eq X.2 x x_mem1 x_mem2 s1 s2 stalk_eq,
      use basic_open w (X.presheaf.map subset1.op s1),
      refine ‚ü®‚ü®w, _, rfl‚ü©, ‚ü®x_memw, _‚ü©, Œª z hz, ‚ü®_, _‚ü©‚ü©, rw ht1, simp only [germ_res_apply], refl,
      rcases hz with ‚ü®hz1, hz2‚ü©, apply h1, rw hu1, refine ‚ü®subset1.le hz1, _‚ü©, rw [hz2, germ_res_apply], refl,
      rcases hz with ‚ü®hz1, hz2‚ü©, apply h2, rw hu2, refine ‚ü®subset2.le hz1, _‚ü©, rw [hz2, res_eq, germ_res_apply], refl, },
      
    { simp only [exists_prop, set.mem_set_of_eq] at xt_mem,
      obtain ‚ü®S, S_mem, xt_mem‚ü© := xt_mem,
      specialize ih S S_mem xt_mem,
      obtain ‚ü®V, hV, xt_memV, subset1‚ü© := ih,
      refine ‚ü®V, hV, xt_memV, _‚ü©,
      apply set.subset_sUnion_of_subset _ S subset1 S_mem, } }
end

-- #exit
-- structure is_open_Spe_X_str (u : opens X) (V : set (Spe X)) : Prop :=
-- (fst_mem_u (z : V) : z.1.1 ‚àà u.1)
-- (comes_from_section (z : V) : 
--   ‚àÉ (v : opens X) (h : v ‚â§ u) (h' : z.1.1 ‚àà v) (s : X.presheaf.obj (op v)), z.1.2 = @germ _ _ _ X.1 X.2 v ‚ü®z.1.1, h'‚ü© s)

-- def is_open_in_Spe_X (V : set (Spe X)) : Prop := ‚àÉ (u : opens X), is_open_Spe_X_str u V

-- instance spe_X_top : topological_space (Spe X) :=
-- { is_open := is_open_in_Spe_X,
--   is_open_univ := begin
--     unfold is_open_in_Spe_X,
--     refine ‚ü®‚ü®set.univ, is_open_univ‚ü©, _, _‚ü©,
--     { rintros z, refine set.mem_univ _, },
--     { rintros ‚ü®‚ü®z, t‚ü©, h1‚ü©, 
--       obtain ‚ü®u, z_mem, s, hs‚ü© := germ_exist X.2 z t,
--       refine ‚ü®u, le_top, z_mem, ‚ü®s, _‚ü©‚ü©, rw hs, }
--   end,
--   is_open_inter := Œª V‚ÇÅ V‚ÇÇ hV‚ÇÅ hV‚ÇÇ, begin
--     unfold is_open_in_Spe_X at hV‚ÇÅ hV‚ÇÇ ‚ä¢,
--     obtain ‚ü®u‚ÇÅ, hu11, hu12‚ü© := hV‚ÇÅ,
--     obtain ‚ü®u‚ÇÇ, hu21, hu22‚ü© := hV‚ÇÇ,
--     use u‚ÇÅ ‚äì u‚ÇÇ, fconstructor,
--     { rintros ‚ü®‚ü®z, t‚ü©, h‚ü©,
--       specialize hu11 (‚ü®‚ü®z, t‚ü©, set.inter_subset_left V‚ÇÅ V‚ÇÇ h‚ü© : V‚ÇÅ),
--       specialize hu21 (‚ü®‚ü®z, t‚ü©, set.inter_subset_right V‚ÇÅ V‚ÇÇ h‚ü© : V‚ÇÇ),
--       refine ‚ü®hu11, hu21‚ü©, },
--     { rintros ‚ü®‚ü®z, t‚ü©, h‚ü©,
--       specialize hu12 (‚ü®‚ü®z, t‚ü©, set.inter_subset_left V‚ÇÅ V‚ÇÇ h‚ü© : V‚ÇÅ),
--       specialize hu22 (‚ü®‚ü®z, t‚ü©, set.inter_subset_right V‚ÇÅ V‚ÇÇ h‚ü© : V‚ÇÇ),
--       obtain ‚ü®v‚ÇÅ, v‚ÇÅ_le, mem1, ‚ü®s1, hs1‚ü©‚ü© := hu12,
--       obtain ‚ü®v‚ÇÇ, v‚ÇÇ_le, mem2, ‚ü®s2, hs2‚ü©‚ü© := hu22,
--       use v‚ÇÅ ‚äì v‚ÇÇ, split, refine inf_le_inf v‚ÇÅ_le v‚ÇÇ_le,
--       use ‚ü®mem1, mem2‚ü©,
--       use X.presheaf.map (quiver.hom.op (ulift.up (plift.up (show v‚ÇÅ ‚äì v‚ÇÇ ‚â§ v‚ÇÅ, from inf_le_left)))) s1,
--       simp only [germ_res_apply], simp only at hs1, tidy, }
--   end,
--   is_open_sUnion := Œª ‚Ñê h‚Ñê, begin
--     unfold is_open_in_Spe_X at h‚Ñê ‚ä¢,
--     set choice_function : ‚Ñê ‚Üí opens X := Œª I : ‚Ñê, (h‚Ñê I.1 I.2).some with cf_eq,
--     use Sup (set.range choice_function), split,
--     { rintros ‚ü®‚ü®z, t‚ü©, h‚ü©,
--       simp only [exists_prop, set.mem_Union, set.mem_range, 
--         set_coe.exists, set.sUnion_image, exists_and_distrib_right, opens.mem_coe,
--         set.Union_exists, opens.Sup_s, set.mem_set_of_eq, subtype.val_eq_coe] at h ‚ä¢,
--       obtain ‚ü®S, S_mem, zt_mem‚ü© := h,
--       use choice_function ‚ü®S, S_mem‚ü©, use S, use S_mem,
--       specialize h‚Ñê S S_mem,
--       have h2 := h‚Ñê.some_spec,
--       rcases h2 with ‚ü®h21, h22‚ü©, convert h21 ‚ü®‚ü®z, t‚ü©, zt_mem‚ü©, },
--     { rintros ‚ü®‚ü®z, t‚ü©, h‚ü©,
--       simp only [exists_prop, set.mem_set_of_eq] at h ‚ä¢,
--       obtain ‚ü®S, S_mem, zt_mem‚ü© := h,
--       specialize h‚Ñê S S_mem,
--       have h2 := h‚Ñê.some_spec,
--       rcases h2 with ‚ü®h21, h22‚ü©,
--       specialize h22 ‚ü®‚ü®z, t‚ü©, zt_mem‚ü©,
      
--       obtain ‚ü®v, v_le, mem_v, s, hs‚ü© := h22,
--       use v, refine ‚ü®le_trans v_le (le_Sup _), mem_v, ‚ü®s, _‚ü©‚ü©,
--       simp only [set.mem_range, set_coe.exists], use S, use S_mem,
--       simp only at hs, rw ‚Üêhs,}
--   end,
-- }

-- lemma continous_pr : continuous (@pr X) :=
-- begin
--   rw continuous_def, rintros v v_open,
--   have set_eq : pr ‚Åª¬π' v = ‚ãÉ (u : opens X) (h : u ‚â§ ‚ü®v, v_open‚ü©) (s : X.presheaf.obj (op u)), { z | z.1 ‚àà u },
--   { ext, rcases x with ‚ü®x, t‚ü©, unfold pr, simp only [exists_prop, set.mem_preimage, set.mem_Union, set.mem_set_of_eq, exists_const],
--     split; intros h,
--     { use ‚ü®v, v_open‚ü©, split, exact le_refl _, exact h, },
--     { obtain ‚ü®u, h1, h2‚ü© := h, tidy,} },
--   rw set_eq,
--   refine is_open_Union _, rintros w,
--   refine is_open_Union _, intros hw,
--   refine is_open_Union _, intros s,
--   unfold is_open,
--   use w, split,
--   { rintros ‚ü®‚ü®z, t‚ü©, h‚ü©,
--     exact h, },
--   { rintros ‚ü®‚ü®z, t‚ü©, h‚ü©,
--     obtain ‚ü®u, z_mem, s, hs‚ü© := germ_exist X.2 z t,
--     use w ‚äì u, split, exact inf_le_left, refine ‚ü®‚ü®h, z_mem‚ü©, ‚ü® X.presheaf.map (quiver.hom.op (ulift.up (plift.up (show w ‚äì u ‚â§ u, from inf_le_right)))) s, _‚ü©‚ü©,
--     simp only [germ_res_apply], tidy, }
-- end

@[ext] structure continuous_sections (u : opens X) :=
(func : u ‚Üí Spe X)
(is_cont : continuous func)
(is_section (x : u) : (func x).1 = x.1 )

@[ext] lemma cont_sec_eq_iff (u : opens X) (s t : continuous_sections u) : s = t ‚Üî s.func = t.func :=
‚ü®Œª h, begin rw h end, Œª h, begin ext1, exact h, end‚ü©


noncomputable instance has_zero_continuous_sections (u : opens X) : has_zero (continuous_sections u) :=
{ zero := ‚ü®Œª x, ‚ü®x.1, 0‚ü©, sorry, Œª x, by refl‚ü© }

noncomputable instance has_add_continuous_sections (u : opens X) : has_add (continuous_sections u) :=
{ add := Œª f g,
  { func := Œª x : u, ‚ü®x.1, eq.rec (f.func x).2 (f.is_section x) + eq.rec (g.func x).2 (g.is_section x)‚ü©,
    is_cont := sorry,
    is_section := Œª x, rfl } }

-- @[to_additive]
noncomputable instance has_mul_continuous_sections (u : opens X) : has_mul (continuous_sections u) :=
{ mul := Œª f g,
  { func := Œª x : u, ‚ü®x.1, eq.rec (f.func x).2 (f.is_section x) * eq.rec (g.func x).2 (g.is_section x)‚ü©,
    is_cont := begin
      apply is_topological_basis.continuous Spe_basis_is_topology_basis,
      rintros W ‚ü®w, s, hs‚ü©,
      rw hs,
      set w' : set (w.1.inter u.1) := { z | 
          germ X.2 ‚ü®z.1, set.inter_subset_left _ _ z.2‚ü© s = 
          ((eq.rec (f.func ‚ü®z.1, set.inter_subset_right _ _ z.2‚ü©).2 (f.3 ‚ü®z.1, set.inter_subset_right _ _ z.2‚ü©)) : X.stalk z.1) *
          ((eq.rec (g.func ‚ü®z.1, set.inter_subset_right _ _ z.2‚ü©).2 (g.3 ‚ü®z.1, set.inter_subset_right _ _ z.2‚ü©)) : X.stalk z.1) },

      use (Œª x : w.1.inter u.1, x.1) '' w',
      refine ‚ü®_, _‚ü©,

      { sorry },
      { sorry },

    end,
    is_section := Œª x, rfl } }

noncomputable instance has_neg_continuous_sections (u : opens X) : has_neg (continuous_sections u) :=
{ neg := Œª f,
  { func := Œª x, ‚ü®x.1, -(eq.rec (f.func x).2 (f.is_section x))‚ü©,
    is_cont := sorry,
    is_section := Œª x, rfl }
}

noncomputable instance add_monoid_continuous_sections (u : opens X) : add_monoid (continuous_sections u) :=
{ add_assoc := Œª f g h, begin
    ext1, refine funext (Œª x, _),
    refine sigma.eq rfl _, 
    simp only, 
    suffices H : (f + g + h).func x = (f + (g + h)).func x,
    injections_and_clear, dsimp at *, simp at *, assumption,

    unfold has_add.add,
    dsimp only, apply sigma.eq _ _, refl, 
    simp only,
    finish,
  end,
  zero_add := Œª f, begin
    rcases f with ‚ü®f, fc, fs‚ü©, 
    unfold has_zero.zero,
    unfold has_add.add,
    simp only, refine funext (Œª x, _),

    have eq1 := (fs x).symm,
    dsimp only,
    apply sigma.eq _ _, 
    refine eq1,

    dsimp only,
    have : ‚àÄ t : X.stalk x.1, 0 + t = t,
    { intros t, rw zero_add },
    unfold has_add.add at this,
    unfold has_zero.zero at this,
    rw this, finish,
  end,
  add_zero := Œª f, begin
    rcases f with ‚ü®f, fc, fs‚ü©, 
    unfold has_zero.zero,
    unfold has_add.add,
    simp only, refine funext (Œª x, _),

    have eq1 := (fs x).symm,
    dsimp only,
    apply sigma.eq _ _, 
    refine eq1,

    dsimp only,
    have : ‚àÄ t : X.stalk x.1, t + 0 = t,
    { intros t, rw add_zero },
    unfold has_add.add at this,
    unfold has_zero.zero at this,
    rw this, finish,
  end,
  ..(has_add_continuous_sections u),
  ..(has_zero_continuous_sections u)}

noncomputable instance add_comm_group_continuous_sections (u : opens X) : add_comm_group (continuous_sections u) :=
{ 
  add_comm := Œª f g,
  begin
    ext1,
    refine funext (Œª x, _), refine sigma.eq rfl _, 
    simp only, 
    suffices H : (f + g).func x = (g + f).func x,
    injections_and_clear, dsimp at *, simp at *, assumption,

    unfold has_add.add,
    dsimp only, apply sigma.eq _ _, refl, 
    simp only,
    finish,
  end,

  add_left_neg := Œª f, begin
    ext1,
    unfold has_neg.neg,
    unfold sub_neg_monoid.neg,
    unfold has_neg.neg,

    unfold has_add.add,
    unfold add_zero_class.add,
    unfold add_monoid.add,
    unfold sub_neg_monoid.add,
    unfold add_monoid.add,
    unfold has_add.add,
    simp only,

    unfold has_zero.zero,
    unfold add_zero_class.zero,
    unfold add_monoid.zero,
    unfold sub_neg_monoid.zero,
    unfold add_monoid.zero,
    unfold has_zero.zero,
    simp only, refine funext (Œª x, _),

    refine sigma.eq rfl _, 
    simp only,

    have : ‚àÄ (t : X.stalk x), -t + t = 0,
    { intros t, rw add_left_neg, },
    unfold has_add.add at this,
    unfold has_neg.neg at this, rw this, refl,
  end,
  ..(add_monoid_continuous_sections u),
  ..(has_neg_continuous_sections u) }


-- noncomputable instance continuous_sections_commring (u : opens X) : comm_ring (continuous_sections u) :=
-- { add_assoc := _,
--   ..(add_comm_group_continuous_sections u)}



-- noncomputable def Spe_presheaf : Top.presheaf CommRing X.1 :=
-- { obj := Œª u, ‚ü®continuous_sections (unop u),
--     { add := Œª f g, ‚ü®‚ü®Œª x, ‚ü®x.1, 
--       eq.rec_on (f.2 x) (f.1 x).2 + eq.rec_on (g.2 x) (g.1 x).2‚ü©, 
--       begin
--         rcases f with ‚ü®‚ü®f, fc‚ü©, hf‚ü©,
--         rcases g with ‚ü®‚ü®g, gc‚ü©, hg‚ü©,
--         simp only [auto_param_eq] at fc gc ‚ä¢,
--         dsimp only,
--       end
--       ‚ü©, _‚ü©,
--       add_assoc := _,
--       add_comm := _,
      
--       zero := _,
--       zero_add := _,
--       add_zero := _,
      
--       neg := _,
--       add_left_neg := _,
      
--       mul := _,
--       mul_assoc := _,
--       mul_comm := _,

--       one := _,
--       one_mul := _,
      
--       left_distrib := _,
--       right_distrib := _ }
--   ‚ü©,
--   map := Œª u v h f, 
--     ‚ü®‚ü®Œª x, f.1 ‚ü®x, ((quiver.hom.unop h).le x.2)‚ü©, by continuity‚ü©,
--     Œª x, begin
--       simp only [continuous_map.coe_mk, function.comp_app, subtype.val_eq_coe],
--       convert f.2 ‚ü®x, ((quiver.hom.unop h).le x.2)‚ü©,
--     end‚ü© }

-- def Spe_Presheafed_Space : PresheafedSpace Type* :=
-- { carrier := Top.of X,
--   presheaf := Spe_presheaf }

-- lemma Spe_is_sheaf : is_sheaf (@Spe_presheaf X) := sorry

import algebraic_geometry.sheafed_space
import algebraic_geometry.stalks
import topology.bases
import algebra.category.CommRing.colimits
import algebra.category.CommRing.filtered_colimits
import topology.basic

open algebraic_geometry category_theory
  algebraic_geometry.PresheafedSpace topological_space opposite
  category_theory.limits Top.presheaf

variables (X : PresheafedSpace CommRing)

def Spe := Œ£ x, X.stalk x

variables {X}

structure is_basic_open_prop (u : opens X) (s : X.presheaf.obj (op u)) (x : Spe X) : Prop :=
(pr_in : x.1 ‚àà u)
(is_stalk : x.2 = germ X.2 ‚ü®x.1, pr_in‚ü© s)

-- #print is_basic_open_prop

def basic_open (u : opens X) (s : X.presheaf.obj (op u)) : set (Spe X) := set_of (is_basic_open_prop u s)
-- #check is_basic_open

def mem_basic_open (u : opens X) (s : X.2.obj (op u)) (x : Spe X) : x ‚àà basic_open u s ‚Üí Œ£' (h : x.1 ‚àà u), x.2 = germ X.2 ‚ü®x.1, h‚ü© s := Œª h,
begin
  refine ‚ü®h.1, h.2‚ü©,
end

def mem_basic_open' (u : opens X) (s : X.2.obj (op u)) (x : Spe X) : (Œ£' (h : x.1 ‚àà u), x.2 = germ X.2 ‚ü®x.1, h‚ü© s) ‚Üí x ‚àà basic_open u s := Œª ‚ü®h1, h2‚ü©,
begin
  refine ‚ü®h1, h2‚ü©,
end

def Spe_basis : set (set (Spe X)) := { V : set (Spe X) | ‚àÉ (u : opens X) (s : X.presheaf.obj (op u)), V = basic_open u s }

instance Spe_topology : topological_space (Spe X) := generate_from Spe_basis 

lemma Spe_basis_is_topology_basis : is_topological_basis (@Spe_basis X) :=
begin
  apply is_topological_basis_of_open_of_nhds,
  { intros V hV, apply generate_open.basic, exact hV },
  { rintros ‚ü®x, t‚ü© V xt_mem Vo,
    induction Vo with W Wb W1 W2 W1o W2o h1 h2 ùíÆ hùíÆ ih,
    
    { use W, refine ‚ü®Wb, xt_mem, Œª _, id‚ü©, },
    { obtain ‚ü®u, x_mem, s, hs‚ü© := germ_exist X.2 x t,
      use basic_open u s,
      refine ‚ü®‚ü®u, s, rfl‚ü©, ‚ü®x_mem, hs.symm‚ü©, Œª _ _, set.mem_univ _‚ü©, },
      
    { specialize h1 (set.inter_subset_left _ _ xt_mem),
      specialize h2 (set.inter_subset_right _ _ xt_mem),
      obtain ‚ü®V1, V1b, xt_mem1, h1‚ü© := h1,
      obtain ‚ü®V2, V2b, xt_mem2, h2‚ü© := h2,
      obtain ‚ü®u1, s1, hu1‚ü© := V1b,
      obtain ‚ü®u2, s2, hu2‚ü© := V2b,
      rw hu1 at xt_mem1,
      rw hu2 at xt_mem2,
      rcases xt_mem1 with ‚ü®x_mem1, ht1‚ü©,
      rcases xt_mem2 with ‚ü®x_mem2, ht2‚ü©,
      have stalk_eq : X.presheaf.germ ‚ü®x, x_mem1‚ü© s1= X.presheaf.germ ‚ü®x, x_mem2‚ü© s2,
      rw [‚Üêht1, ht2],
      obtain ‚ü®w, x_memw, subset1, subset2, res_eq‚ü© := germ_eq X.2 x x_mem1 x_mem2 s1 s2 stalk_eq,
      use basic_open w (X.presheaf.map subset1.op s1),
      refine ‚ü®‚ü®w, _, rfl‚ü©, ‚ü®x_memw, _‚ü©, Œª z hz, ‚ü®_, _‚ü©‚ü©, rw ht1, simp only [germ_res_apply], refl,
      rcases hz with ‚ü®hz1, hz2‚ü©, apply h1, rw hu1, refine ‚ü®subset1.le hz1, _‚ü©, rw [hz2, germ_res_apply], refl,
      rcases hz with ‚ü®hz1, hz2‚ü©, apply h2, rw hu2, refine ‚ü®subset2.le hz1, _‚ü©, rw [hz2, res_eq, germ_res_apply], refl, },
      
    { simp only [exists_prop, set.mem_set_of_eq] at xt_mem,
      obtain ‚ü®S, S_mem, xt_mem‚ü© := xt_mem,
      specialize ih S S_mem xt_mem,
      obtain ‚ü®V, hV, xt_memV, subset1‚ü© := ih,
      refine ‚ü®V, hV, xt_memV, _‚ü©,
      apply set.subset_sUnion_of_subset _ S subset1 S_mem, } }
end

@[ext] structure continuous_sections (u : opens X) :=
(func : u ‚Üí Spe X)
(is_cont : continuous func)
(is_section (x : u) : (func x).1 = x.1 )

def pr : Spe X ‚Üí X := sigma.fst

lemma pr_open_map : is_open_map (@pr X) := 
begin
  rw is_topological_basis.is_open_map_iff Spe_basis_is_topology_basis,
  rintros V ‚ü®v, s, hv‚ü©,
  rw hv,
  convert v.2,
  ext x, split; intros h, 
  simp only [set.mem_image] at h,
  obtain ‚ü®y, hy1, hy2‚ü© := h,
  have h := mem_basic_open v s y hy1,
  cases h, unfold pr at hy2, rw hy2 at h_fst, exact h_fst,
  unfold pr, simp only [basic_open, set.mem_image, set.mem_set_of_eq],
  refine ‚ü®‚ü®x, germ X.2 ‚ü®x, h‚ü© s‚ü©, _‚ü©, tidy,
end

noncomputable instance has_zero_continuous_sections (u : opens X) : has_zero (continuous_sections u) :=
{ zero := ‚ü®Œª x, ‚ü®x.1, 0‚ü©, sorry, Œª x, by refl‚ü© }

noncomputable instance has_add_continuous_sections (u : opens X) : has_add (continuous_sections u) :=
{ add := Œª f g,
  { func := Œª x : u, ‚ü®x.1, eq.rec (f.func x).2 (f.is_section x) + eq.rec (g.func x).2 (g.is_section x)‚ü©,
    is_cont := sorry,
    is_section := Œª x, rfl } }

-- @[to_additive]
noncomputable instance has_mul_continuous_sections (u : opens X) : has_mul (continuous_sections u) :=
{ mul := Œª f g,
  { func := Œª x : u, ‚ü®x.1, eq.rec (f.func x).2 (f.is_section x) * eq.rec (g.func x).2 (g.is_section x)‚ü©,
    is_cont := begin
      set Ffunc := Œª (x : u), (eq.rec (f.func x).snd (f.is_section x) : X.stalk x.1) with Ffunc_eq,
      set Gfunc := Œª (x : u), (eq.rec (g.func x).snd (g.is_section x) : X.stalk x.1) with Gfunc_eq,
      apply is_topological_basis.continuous Spe_basis_is_topology_basis,
      
      rintros W ‚ü®w, s, hs‚ü©,
      rw ‚Üêsubset_interior_iff_open, 
      intros x hx,
      set t1 := Ffunc x with t1_eq,
      set t2 := Gfunc x with t2_eq,
      have t1_eq' : (eq.rec (f.func x).snd (f.3 x) : X.stalk x.1) = t1 := rfl,        
      have t2_eq' : (eq.rec (g.func x).snd (g.3 x) : X.stalk x.1) = t2 := rfl,
      rw hs at hx ‚ä¢, simp only [set.mem_preimage] at hx ‚ä¢,
      have hx' := mem_basic_open w s _ hx,
      rcases hx' with ‚ü®h1, h2‚ü©, dsimp only at h1 h2, rw [t1_eq', t2_eq'] at h2,

      obtain ‚ü®u_mul, xmemu_mul, s_mul, s_muleq‚ü© := germ_exist X.2 x.1 (t1 * t2),
      obtain ‚ü®u1, xmemu1, s1, s1eq‚ü© := germ_exist X.2 x.1 t1,
      obtain ‚ü®u2, xmemu2, s2, s2eq‚ü© := germ_exist X.2 x.1 t2,

      set res_u1_u12 := X.2.map (quiver.hom.op (ulift.up (plift.up (inf_le_left : u1 ‚äì u2 ‚â§ u1)))) with res_u1_u12_eq,
      set res_u2_u12 := X.2.map (quiver.hom.op (ulift.up (plift.up (inf_le_right : u1 ‚äì u2 ‚â§ u2)))) with res_u2_u12_eq,
      set proj_12_x := @germ _ _ _ X.1 X.2 (u1 ‚äì u2) ‚ü®x.1, ‚ü®xmemu1, xmemu2‚ü©‚ü© with proj_12_x_eq,
      have eq1 : t1 * t2 = proj_12_x (res_u1_u12 s1 * res_u2_u12 s2),
      { rw [proj_12_x_eq, res_u1_u12_eq, res_u2_u12_eq],
        simp only [ring_hom.map_mul, germ_res_apply],
        rw [‚Üês1eq, ‚Üês2eq], refl, },
      rw h2 at s_muleq,
        
      set res_w_uw := X.2.map (quiver.hom.op (ulift.up (plift.up (inf_le_right : u ‚äì w ‚â§ w)))) with res_w_uw_eq,
      have smul_eq' : X.presheaf.germ ‚ü®x.val, _‚ü© (res_w_uw s) = (X.presheaf.germ ‚ü®x.val, xmemu_mul‚ü©) s_mul,
      { simp only [germ_res_apply], rw s_muleq, refl, },
      obtain ‚ü®o, xmemo, iw, iu_mul, res_eq‚ü© := @germ_eq _ _ _ _ _ _ X.2 (u ‚äì w) u_mul x.1 ‚ü®x.2, h1‚ü© xmemu_mul (res_w_uw s) s_mul smul_eq',
      rw mem_interior, refine ‚ü®{z : u | z.1 ‚àà o.1 }, _, _, by assumption‚ü©,
      { rintros ‚ü®z, zmemu‚ü© hz, 
        simp only [set.mem_preimage, opens.mem_coe, set.mem_set_of_eq, subtype.coe_mk, subtype.val_eq_coe] at hz ‚ä¢,
        apply mem_basic_open', refine ‚ü®_, _‚ü©, simp only,
        suffices : u ‚äì w ‚â§ w, apply this, exact iw.le hz, exact inf_le_right,
        
        simp only [germ_res_apply, eq_self_iff_true, ring_hom.map_mul, subtype.val_eq_coe] at *,
        sorry },
      { rw is_open_induced_iff, refine ‚ü®o.1, o.2, _‚ü©, ext x, split; intros hx;
        simp only [set.mem_preimage, opens.mem_coe, set.mem_set_of_eq, subtype.val_eq_coe] at hx ‚ä¢; exact hx, },
    end,
    is_section := Œª x, rfl } }

noncomputable instance has_neg_continuous_sections (u : opens X) : has_neg (continuous_sections u) :=
{ neg := Œª f,
  { func := Œª x, ‚ü®x.1, -(eq.rec (f.func x).2 (f.is_section x))‚ü©,
    is_cont := sorry,
    is_section := Œª x, rfl }
}

noncomputable instance add_monoid_continuous_sections (u : opens X) : add_monoid (continuous_sections u) :=
{ add_assoc := Œª f g h, begin
    ext1, refine funext (Œª x, _),
    refine sigma.eq rfl _, 
    simp only, 
    suffices H : (f + g + h).func x = (f + (g + h)).func x,
    injections_and_clear, dsimp at *, simp at *, assumption,

    unfold has_add.add,
    dsimp only, apply sigma.eq _ _, refl, 
    simp only,
    finish,
  end,
  zero_add := Œª f, begin
    rcases f with ‚ü®f, fc, fs‚ü©, 
    unfold has_zero.zero,
    unfold has_add.add,
    simp only, refine funext (Œª x, _),

    have eq1 := (fs x).symm,
    dsimp only,
    apply sigma.eq _ _, 
    refine eq1,

    dsimp only,
    have : ‚àÄ t : X.stalk x.1, 0 + t = t,
    { intros t, rw zero_add },
    unfold has_add.add at this,
    unfold has_zero.zero at this,
    rw this, finish,
  end,
  add_zero := Œª f, begin
    rcases f with ‚ü®f, fc, fs‚ü©, 
    unfold has_zero.zero,
    unfold has_add.add,
    simp only, refine funext (Œª x, _),

    have eq1 := (fs x).symm,
    dsimp only,
    apply sigma.eq _ _, 
    refine eq1,

    dsimp only,
    have : ‚àÄ t : X.stalk x.1, t + 0 = t,
    { intros t, rw add_zero },
    unfold has_add.add at this,
    unfold has_zero.zero at this,
    rw this, finish,
  end,
  ..(has_add_continuous_sections u),
  ..(has_zero_continuous_sections u)}

noncomputable instance add_comm_group_continuous_sections (u : opens X) : add_comm_group (continuous_sections u) :=
{ 
  add_comm := Œª f g,
  begin
    ext1,
    refine funext (Œª x, _), refine sigma.eq rfl _, 
    simp only, 
    suffices H : (f + g).func x = (g + f).func x,
    injections_and_clear, dsimp at *, simp at *, assumption,

    unfold has_add.add,
    dsimp only, apply sigma.eq _ _, refl, 
    simp only,
    finish,
  end,

  add_left_neg := Œª f, begin
    ext1,
    unfold has_neg.neg,
    unfold sub_neg_monoid.neg,
    unfold has_neg.neg,

    unfold has_add.add,
    unfold add_zero_class.add,
    unfold add_monoid.add,
    unfold sub_neg_monoid.add,
    unfold add_monoid.add,
    unfold has_add.add,
    simp only,

    unfold has_zero.zero,
    unfold add_zero_class.zero,
    unfold add_monoid.zero,
    unfold sub_neg_monoid.zero,
    unfold add_monoid.zero,
    unfold has_zero.zero,
    simp only, refine funext (Œª x, _),

    refine sigma.eq rfl _, 
    simp only,

    have : ‚àÄ (t : X.stalk x), -t + t = 0,
    { intros t, rw add_left_neg, },
    unfold has_add.add at this,
    unfold has_neg.neg at this, rw this, refl,
  end,
  ..(add_monoid_continuous_sections u),
  ..(has_neg_continuous_sections u) }


-- noncomputable instance continuous_sections_commring (u : opens X) : comm_ring (continuous_sections u) :=
-- { add_assoc := _,
--   ..(add_comm_group_continuous_sections u)}



-- noncomputable def Spe_presheaf : Top.presheaf CommRing X.1 :=
-- { obj := Œª u, ‚ü®continuous_sections (unop u),
--     { add := Œª f g, ‚ü®‚ü®Œª x, ‚ü®x.1, 
--       eq.rec_on (f.2 x) (f.1 x).2 + eq.rec_on (g.2 x) (g.1 x).2‚ü©, 
--       begin
--         rcases f with ‚ü®‚ü®f, fc‚ü©, hf‚ü©,
--         rcases g with ‚ü®‚ü®g, gc‚ü©, hg‚ü©,
--         simp only [auto_param_eq] at fc gc ‚ä¢,
--         dsimp only,
--       end
--       ‚ü©, _‚ü©,
--       add_assoc := _,
--       add_comm := _,
      
--       zero := _,
--       zero_add := _,
--       add_zero := _,
      
--       neg := _,
--       add_left_neg := _,
      
--       mul := _,
--       mul_assoc := _,
--       mul_comm := _,

--       one := _,
--       one_mul := _,
      
--       left_distrib := _,
--       right_distrib := _ }
--   ‚ü©,
--   map := Œª u v h f, 
--     ‚ü®‚ü®Œª x, f.1 ‚ü®x, ((quiver.hom.unop h).le x.2)‚ü©, by continuity‚ü©,
--     Œª x, begin
--       simp only [continuous_map.coe_mk, function.comp_app, subtype.val_eq_coe],
--       convert f.2 ‚ü®x, ((quiver.hom.unop h).le x.2)‚ü©,
--     end‚ü© }

-- def Spe_Presheafed_Space : PresheafedSpace Type* :=
-- { carrier := Top.of X,
--   presheaf := Spe_presheaf }

-- lemma Spe_is_sheaf : is_sheaf (@Spe_presheaf X) := sorry
